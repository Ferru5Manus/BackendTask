Работа с базой данных:
1. Работу с базой данных осуществляет класс UserDatabaseRepository.
1.1 Для проверки наличия таблицы используется метод IsTableExist().
1.2 Для создания таблицы в случае её отсутствия используется метод ConfigureDb().
2. Для записи новой строки в базу данных используется метод CreateUser, принимающий на вход экземпляр класса ValidatedUserDto,
после проверки данных в экземпляре ValidatedUserDto, в случае если валидация пройдена, записывает в базу данных нового пользователя.
В случае ошибки записи в базу данных, в консоль будет написан текст ошибки.
3. Для обновления данных в строке в базе данных используется метод UpdateUser, принимающий на вход экземпляр класса ValidatedUserDto,
после проверки данных в экземпляре ValidatedUserDto, в случае если валидация пройдена, изменяет данные пользователя с соответствущим Id.
Для обновления доступны поля username,password,updated_at. В случае ошибки обновления в базе данных, в консоль будет написан текст ошибки.
4. Для удаления из строки из базы данных используется метод DeleteUser, принимающий на вход экземпляр класса ValidatedUserDto,
после проверки данных в экземпляре ValidatedUserDto, в случае если валидация пройдена, удаляет пользователя с соответствущим Id.
В случае ошибки удаления записи в базе данных, в консоль будет написан текст ошибки.
5. Для получения данных о пользователе используются методы GetUserByName, GetUserById, первый принимает на вход имя пользователя, а второй id пользователя.
После этого из базы данных получается пользователь с соответствующим именем пользователя/id. Метод возвращает объект ValidatedUserDto.
В случае ошибки получения данных в консоль будет выведена ошибка, а метод вернёт null.
Работа с запросами:
1. Для получения пользователя через id в запросе /getUser в виде json надо отправить id (id:(айди пользователя(число))), в качестве ответа будет получен записаный в json ValidatedUserDto.
 В случае отсутствия пользователя в бд, возвращает null.
2. Для получения пользователя через имя пользователя в запросе /getUser в виде json надо отправить username (username:(имя пользователя(строка))), возвращает null.
3. Для создания пользователя нужно в запросе /createUser отправить username и password в виде json, в случае ошибки при создании пользователя веозвращает false, при правильном выполнении возвращает true.
4. Для удаления пользователя нужно в запросе /deleteUser отправить id пользователя в виде json, в случае ошибки при удалении пользователя веозвращает false, при правильном выполнении возвращает true.
5. Для изменения пользователя нужно в запросе /updateUser отправить id, username, password пользователя в виде json, в случае ошибки при обновлении пользователя веозвращает false, при правильном выполнении возвращает true.